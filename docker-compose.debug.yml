version: '3.8'
services:
  backend:
    build:
      context: ./backend/src
      dockerfile: Debug.Dockerfile
    ports:
      - "5000:5000"
      - "5001:5001"  # For HTTPS if needed
    volumes:
      - ./backend/src:/app/src
      - backend-packages:/root/.nuget/packages  # Persist NuGet packages
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:5000
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - AppSettings__ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB:-contacts};Username=${POSTGRES_USER:-contacts_admin};Password=${POSTGRES_PASSWORD:-YourStrongPassword123!}
      - AppSettings__Secret=${JWT_SECRET:-THIS_IS_A_SECRET_USED_TO_SIGN_AND_VERIFY_JWT_TOKENS_REPLACE_IT_WITH_YOUR_OWN_SECRET}
      - AppSettings__Issuer=${JWT_ISSUER:-http://localhost:5000}
      - AppSettings__Audience=${JWT_AUDIENCE:-http://localhost:5000}
      - AppSettings__PasswordResetUrl=${PASSWORD_RESET_URL:-http://localhost:4200/reset-password/}
      - SmtpSettings__SmtpServer=${SMTP_SERVER:-smtp.example.com}
      - SmtpSettings__Port=${SMTP_PORT:-587}
      - SmtpSettings__Username=${SMTP_USERNAME:-user}
      - SmtpSettings__Password=${SMTP_PASSWORD:-password}
      - SmtpSettings__FromEmail=${SMTP_FROM_EMAIL:-noreply@example.com}
      - SmtpSettings__EnableSsl=${SMTP_ENABLE_SSL:-true}
    depends_on:
      postgres:
        condition: service_healthy
    # Modified command to keep the container running if dotnet watch fails
    command: >
      bash -c "cd /app/src && 
               dotnet watch run --project Contact.Api/Contact.Api.csproj --urls=http://0.0.0.0:5000 || 
               tail -f /dev/null"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health" , "||", "exit", "0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Debug.Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - frontend-node-modules:/app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200", "||", "exit", "0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Command to run on startup - only install dependencies, don't start server yet
    command: sh -c "npm install && tail -f /dev/null"

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-contacts_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-YourStrongPassword123!}
      - POSTGRES_DB=${POSTGRES_DB:-contacts}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-contacts_admin} -d ${POSTGRES_DB:-contacts}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  backend-packages:  # Persist NuGet packages

networks:
  default:
    name: clean-architecture-network
    driver: bridge
